default: &DEFAULT

  #General
  # For computing compression
  n_params_baseline: None
  verbose: True
  arch: tfno

  #Distributed computing
  distributed:
    use_distributed: False #False in darcy
    wireup_info: 'mpi'
    wireup_store: 'tcp'
    model_parallel_size: 2
    seed: 666

  # FNO related
  tfno:
    n_modes: [16,64] #for t,x
    data_channels: None #where be determined by pde-onfo, see config_arch in main_code #1(pde)+1(dim:postion)  (i.e. in_channels, but should use the name data_ here (model_dispatcher L55))
    # data_channels: 3
    # n_modes_height: 16
    # n_modes_width: 16
    hidden_channels: 32
    projection_channels: 64
    n_layers: 4
    domain_padding: [0.068125,0] #None #0.078125 #None  (one-sided padding the time dimension for accurate dericvative)
    domain_padding_mode: 'one-sided' #symmetric
    fft_norm: 'forward'
    norm: 'group_norm'
    skip: 'linear'
    implementation: 'factorized'
    separable: 0
    preactivation: 0
    
    use_mlp: 1
    mlp:
        expansion: 0.5
        dropout: 0

    factorization: None
    rank: 1.0
    fixed_rank_modes: None
    dropout: 0.0
    tensor_lasso_penalty: 0.0
    joint_factorization: False
    fno_block_precision: 'full' # or 'half', 'mixed'
    stabilizer: None # or 'tanh'

  # Optimizer
  opt:
    n_epochs: 1487
    epoch_pde: 20 # start using pde loss
    pde_rate_inc: 1.7 # weight of pde_loss will be multiple rate_inc times wvery inc_time epchs
    pde_inc_time: 500
    renew_opt: True
    learning_rate: 4e-3 # 5e-3
    learning_rate_1: 1.2e-3 # 5e-3
    training_loss: ['l2','l2']
    train_loss_func: ['rel','rel']
    use_pde: [1,0] # a[0]: for 1024, a[1] for 128
    pde_lam: 1e-7 # scaling factor of different resolution is not taken into account in loss function. This lambda corresponds to ~ lambda=4e-3 for normalized pde residual norm
    pde_loss_method: t_fc_x_f # t_fc_x_f or t_fd_x_f
    loss_type: 'sum' #'mean' or sum
    weight_decay: 1e-4 #1e-4 # 1e-4
    amp_autocast: False

    scheduler_T_max: 500 # For cosine only, typically take n_epochs
    scheduler_patience: 5 # For ReduceLROnPlateau only
    scheduler: 'StepLR' # Or 'CosineAnnealingLR' OR 'ReduceLROnPlateau'
    step_size: 60 #60
    gamma: 0.8 #0.5
        
  # Dataset related
  data:
    batch_size: 4
    pino2_batch_num: 3 # concate pino2_btz_num of 128 with 1 1024 togethor
    pino2_batch_lambda: 1 # balancing loss from two dataset(1024 [0] and 128 [1]) with 0+lam*1
    # n_train: 8000  # will be assigned from lists below, with 0-th element for train
    # train_resolution: 128
    # n_tests: [100, 24]
  
    test_resolutions: ['128train_set','128test',1024,'1024train']  #only used as wandb plot label
    test_batch_sizes: [16, 16,16,16]
    num_data: [1,8000,105,100,100,30,16]
    resolution: [128,128,1024,128,128,1024,1024]
    t_start: [20,70,15,30,30,20,20]  #phy time
    t_interval: [5,5,1,5,5,1,1] #if 0: only choose one t0.
    train_tag: [1,1,1,2,0,0,2] #2: test on train set
    t_predict: 0.1  #phy time
    traj_for_train: [1500,1500,3] #1600 in total for N=128
    train_on_testset: 0 #testing on the training set:1. else(normal): 0
    positional_encoding: True
    encode_input: False
    encode_output: False

    t_step_min: 32
    repeat: 16
  plot:
    model_id: 2 #0-4
    n_traj: 10  #1000
    t_start: 20
    t_run: 80
    repeat_ini: 32
    use_hi: 1 #False
    gs:
      use: 1 #False
      K: 8 # each traj split into K sub traj(conditional random)


  # Patching
  patching:
    levels: 0
    padding: 0
    stitching: False

  # Weights and biases
  wandb:
    log: True
    name: None # If None, config will be used but you can override it here
    group: '' 
    project: # add project name here
    entity:  # add your username here
    sweep: False
    log_output: True
    log_test_interval: 1
    pde: ks 
    pino: 1
    loss: pde #128fno,1024fno, pde
    savemd: True
    model_use: 200
    model_use_type: 1024 